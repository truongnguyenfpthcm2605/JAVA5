package com.poly.app.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.poly.app.dto.MailModel;
import com.poly.app.impl.MailerServiceImpl;

import jakarta.mail.MessagingException;
import jakarta.servlet.ServletContext;
import jakarta.validation.Valid;

@Controller
@RequestMapping("mail")
public class SendingMailController {
	
	@Autowired
	MailerServiceImpl mailerServiceImpl;

	@Autowired
	ServletContext app;
	
	@GetMapping("demo")
	@ResponseBody
	public ResponseEntity<String> demo(Model model) {
		for (int i = 0; i < 10; i++) {
			try {
				mailerServiceImpl.send("truongnvps24083@fpt.edu.vn", "Subject", "Xin Chào");
				
			} catch (Exception e) {
				e.printStackTrace();
				return  new ResponseEntity<>("Error", HttpStatus.INTERNAL_SERVER_ERROR);
			}
		}
		return new ResponseEntity<>("Xong 10 Mail", HttpStatus.OK);
	}
	
	
	@GetMapping("send")
	public String send(Model model) {
		model.addAttribute("Mail", new MailModel());
		return "sendmail";
	}
	
	@PostMapping("send")
	public String sendSuccess(@Valid @RequestParam("files") MultipartFile[] attach, @ModelAttribute("Mail") Optional<MailModel> mail,
			BindingResult result,Model model) throws MessagingException, IllegalStateException, IOException {
		if(result.hasErrors()) {
			System.out.println(mail.get().toString());
			model.addAttribute("message", "Vui lòng Điền đầy dủ thông tin");
		}else {
			System.out.println(mail.get().toString());
			MailModel mails = new MailModel();
			mails.setForm(mail.get().getForm());
			mails.setTo(mail.get().getTo());
			mails.setCc(mail.get().getCc());
			mails.setBcc(mail.get().getCc());
			mails.setForm(mail.get().getForm());
			mails.setBody(mail.get().getBody());
			mails.setFiles(saveFiles(attach, "images"));
			mailerServiceImpl.send(mails);
		}
		
		return "sendmail";
	}
	
	public List<File> saveFiles( MultipartFile[] attach, String folderName) throws IllegalStateException, IOException {
	    File folder = new File(app.getRealPath(folderName));
	    if (!folder.exists()) {
	        folder.mkdir();
	    }
	    List<File> listfile = new ArrayList<>();
	    for (MultipartFile file : attach) {
	        if (!file.isEmpty()) {
	            File outputFile = new File(folderName ,file.getOriginalFilename());
	            file.transferTo(outputFile);
	            listfile.add(outputFile);
	            System.out.println(outputFile.getName());
	        }
	    }
	    return listfile;
	
	}
	
}
